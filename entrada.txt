#################################################### Setup

# Zerando o display de sete segmentos
LDI $0 #Carrega o acumulador com  valor 0
JSR @subrotina_limpa_display #Limpa o display
JSR @subrotina_limpa_leds #Limpa os LEDs

# Inicializando variaveis
LDI $0 #Carrega o acumulador com  valor 0
STA @11 #Zera o valor das unidades
STA @12 #Zera o valor das dezenas
STA @13 #Zera o valor das centenas
STA @14 #Zera o valor das unidades de milhar
STA @15 #Zera o valor das dezenas de milhar
STA @16 #Zera o valor das centenas de milhar

LDI $0 #Carrega o acumulador com  valor 0

STA @17 #Zera a flag de inibir contagem

STA @KEY0 #Limpa a leitura de KEY0
STA @KEY1 #Limpa a leitura de KEY1
STA @KEY2 #Limpa a leitura de KEY2
STA @FPGA_RESET #Limpa a leitura de FPGA_RESET

STA @0 #Criando a constante 0

LDI $1 #Carrega o acumulador com  valor 1
STA @1 #Criando a constante 1

LDI $2 #Carrega o acumulador com  valor 2
STA @2 #Criando a constante 2

LDI $4 #Carrega o acumulador com  valor 4
STA @4 #Criando a constante 4

LDI $5 #Carrega o acumulador com  valor 5
STA @5 #Criando a constante 5

LDI $6 #Carrega o acumulador com  valor 6
STA @6 #Criando a constante 6

LDI $9 #Carrega o acumulador com  valor 9
STA @9 #Criando a constante 9

LDI $10 #Carrega o acumulador com  valor 10
STA @10 #Criando a constante 10

LDI $15 #Carrega o acumulador com  valor 15
STA @115 #Criando a constante 15

LDI $0 #Carrega o acumulador com  valor 0
STA @21 #Maximo valor das unidades do limite
STA @22 #Maximo valor das dezenas do limite
STA @23 #Maximo valor das centenas do limite
STA @24 #Maximo valor das unidades de milhar do limite
STA @25 #Maximo valor das dezenas de milhar do limite
LDI $10 #Carrega o acumulador com  valor 10
STA @26 #Maximo valor das centenas de milhar do limite

#################################################### Main loop
main:

LDA @352 #Lê KEY0
AND1 @1 #Mask
CEQ @0 #Verifica se KEY0 não foi pressionado
JEQ @desvio #Se não foi, pula a chamada da subrotina de incremento
JSR @subrotina_incremento #Chama a subrotina de incremento
desvio:

JSR @subrotina_display #Atualiza o display

LDA @353 #Lê KEY1
AND1 @1 #Mask
CEQ @0 #Verifica se KEY1 não foi pressionado
JEQ @desvio2 #Se não foi, pula a chamada da subrotina de configuracao do limite
JSR @subrotina_configura_limite #Chama a subrotina de configuracao do limite
desvio2:

LDA @356 #Lê FPGA_RESET
AND1 @1 #Mask
CEQ @0 #Verifica se FPGA_RESET não foi pressionado
JEQ @desvio3 #Se não foi, pula a chamada da subrotina de reiniciar contagem
JSR @subrotina_reiniciar_contagem #Chama a subrotina de reiniciar contagem
desvio3:

JMP @main #Retorna ao inicio do loop

#################################################### BEGIN Sub-rotina de incremento de valor
subrotina_incremento:

STA @KEY0 #Limpa a leitura de KEY0
LDA @17 #Lê a flag de inibir contagem
CEQ @0 #Verifica se a contagem não está inibida
JEQ @incremento_unidade_segundo #Se não estiver, continua a contagem
RET #Se estiver inibida, retorna ao loop principal

incremento_unidade_segundo:
LDI $1 #Carrega o acumulador com  valor 1
SOMA @11 #Soma o valor das unidades dos segundos com 1
CEQ @10 #Verifica se o valor das unidades dos segundos é igual a 10
JEQ @incrementa_dezena_segundo #Se sim, incremente a dezena
STA @11 #Armazena o valor das unidades dos segundos
RET #Retorna ao loop principal

incrementa_dezena_segundo:
LDI $0 #Carrega o acumulador com  valor 0
STA @11 #Zera o valor das unidades dos segundos
LDI $1 #Carrega o acumulador com  valor 1
SOMA @12 #Soma o valor das dezenas dos segundos com 1
CEQ @6 #Verifica se o valor das dezenas dos segundos é igual a 6
JEQ @incrementa_unidade_minuto #Se sim, incremente a unidades dos minutos
STA @12 #Armazena o valor das dezenas dos segundos
RET #Retorna ao loop principal

incrementa_unidade_minuto:
LDI $0 #Carrega o acumulador com  valor 0
STA @12 #Zera o valor das dezenas dos segundos
LDI $1 #Carrega o acumulador com  valor 1
SOMA @13 #Soma o valor das unidades dos minutos com 1
CEQ @10 #Verifica se o valor das unidades dos minutos é igual a 10
JEQ @incrementa_dezena_minuto #Se sim, incremente as dezenas dos minutos
STA @13 #Armazena o valor das unidades dos minutos
RET #Retorna ao loop principal

incrementa_dezena_minuto:
LDI $0 #Carrega o acumulador com  valor 0
STA @13 #Zera o valor das unidades dos minutos
LDI $1 #Carrega o acumulador com  valor 1
SOMA @14 #Soma o valor das dezenas dos minutos com 1
CEQ @6 #Verifica se o valor das dezenas dos minutos é igual a 6
JEQ @incrementa_unidade_hora #Se sim, incremente as unidades das horas
STA @14 #Armazena o valor das unidades de milhar
RET #Retorna ao loop principal

incrementa_unidade_hora:
LDI $0 #Carrega o acumulador com  valor 0
STA @14 #Zera o valor das dezenas dos minutos
LDI $1 #Carrega o acumulador com  valor 1
SOMA @15 #Soma o valor das unidades das horas com 1
CEQ @10 #Verifica se o valor das unidades das horas é igual a 10
JEQ @incrementa_dezena_hora #Se sim, incremente as unidades das horas
CEQ @4 #Verifica se o valor das unidades das horas é igual a 4
JEQ @checa_24 #Se sim, cheque se o valor das dezenas de horas é igual a 2
STA @15 #Armazena o valor das unidades das horas
RET #Retorna ao loop principal

incrementa_dezena_hora:
LDI $0 #Carrega o acumulador com  valor 0
STA @15 #Zera o valor das unidades das horas
LDI $1 #Carrega o acumulador com  valor 1
SOMA @16 #Soma o valor das dezenas das horas com 1
STA @16 #Armazena o valor das dezenas das horas
RET #Retorna ao loop principal

checa_24:
LDA R1, 16 #Carrega o registrador 1 com o valor das dezenas de horas
CEQ R1, 2 #Verifica se o valor das dezenas de horas é igual a 2
JEQ @restart #Se sim, reinicie a contagem
STA R0, 15 #Armazena o valor das unidades de horas
RET #Retorna ao loop principal

restart:
LDI $0 #Carrega o acumulador com  valor 0
STA @11 #Armazena o valor das unidades
STA @12 #Armazena o valor das dezenas
STA @13 #Armazena o valor das centenas
STA @14 #Armazena o valor das unidades de milhar
STA @15 #Armazena o valor das dezenas de milhar
STA @16 #Armazena o valor das centenas de milhar
RET #Retorna ao loop principal

#################################################### END da sub-rotina de incremento de valor

#################################################### BEGIN Sub-rotina de atualização do display
subrotina_display:
LDA @11 #Lê o valor das unidades
STA @288 #Escreve o valor das unidades em HEX0
LDA @12 #Lê o valor das dezenas
STA @289 #Escreve o valor das dezenas em HEX1
LDA @13 #Lê o valor das centenas
STA @290 #Escreve o valor das centenas em HEX2
LDA @14 #Lê o valor das unidades de milhar
STA @291 #Escreve o valor das unidades de milhar em HEX3
LDA @15 #Lê o valor das dezenas de milhar
STA @292 #Escreve o valor das dezenas de milhar em HEX4
LDA @16 #Lê o valor das centenas de milhar
STA @293 #Escreve o valor das centenas de milhar em HEX5
RET #Retorna ao loop principal

#################################################### END Sub-rotina de atualização do display

#################################################### BEGIN Sub-rotina de configuração do limite de incremento
subrotina_configura_limite:
JSR @subrotina_limpa_display #Limpa o display
LDI $0 #Carrega o acumulador com  valor 0
STA @11 #Zera o valor das unidades de segundos
STA @12 #Zera o valor das dezenas de segundos
STA @13 #Zera o valor das unidades de minutos
STA @14 #Zera o valor das dezenas de minutos
STA @15 #Zera o valor das unidades de horas
STA @16 #Zera o valor das dezenas de horas

#dezenas de horas
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $32 #Carrega o acumulador com  valor 32
STA @256 #Acende o LEDR5 para indicar que está configurando as dezenas de hora

LDI $2 #Carrega o acumulador com  valor 2
STA @50 #Salva o limite de dezenas de hora
LDIDDR $293 #Salva posição da memória do display

JSR @aguardaKey1 #Aguarda a leitura de KEY1

STA @16 #Armazena o valor das dezenas de horas

#unidades de hora
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $16 #Carrega o acumulador com  valor 16
STA @256 #Acende o LEDR4 para indicar que está configurando as dezenas do limite

aguardaKey1_2:
LDA @320 #Lê SW0-SW7
CLT @4 #Compara com o valor 4
JL @desvio_unidades_hora #Se for menor do que 4, armazena o valor

LDA R1, 16 #Se não for, checa se o valor das dezenas de horas é igual a 2
CLT R1, 2 #Compara com o valor 2
JL @checa_9 #Se dezenas de hora for menor do que 2, checa se unidades de hora é menor do que 9
LDI $3 #Se não for, carrega o acumulador com  valor 3
JMP @desvio_unidades_hora #Se dezenas de hora for igual a 2, armazena o valor 3

checa_9:
CLT @9 #Compara com o valor 9
JL @desvio_unidades_hora #Se for menor do que 9, armazena o valor
LDI $9 #Se não for, carrega o acumulador com  valor 9

desvio_unidades_hora:
STA @292 #Escreve o valor das unidades em HEX4

JSR @subrotina_compara_Key1 #Chama a subrotina de comparação de KEY1
JEQ @aguardaKey1_2 #Se não foi, continue aguardando

STA @15 #Armazena o valor das unidades de hora

#dezenas de minuto
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $8 #Carrega o acumulador com  valor 8
STA @256 #Acende o LEDR3 para indicar que está configurando as dezenas de minuto

LDI $5 #Carrega o acumulador com  valor 5
STA @50 #Salva o limite de dezenas de hora
LDIDDR $291 #Salva posição da memória do display

JSR @aguardaKey1 #Aguarda a leitura de KEY1

STA @14 #Armazena o valor das dezenas de minuto

#unidades de minuto
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $4 #Carrega o acumulador com  valor 4
STA @256 #Acende o LEDR2 para indicar que está configurando as unidades de minuto

LDI $9 #Carrega o acumulador com  valor 9
STA @50 #Salva o limite de dezenas de hora
LDIDDR $290 #Salva posição da memória do display

JSR @aguardaKey1 #Aguarda a leitura de KEY1

STA @13 #Armazena o valor das unidades de minuto

#dezenas de segundo
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $2 #Carrega o acumulador com  valor 2
STA @256 #Acende o LEDR1 para indicar que está configurando as dezenas de segundos

LDI $5 #Carrega o acumulador com  valor 5
STA @50 #Salva o limite de dezenas de hora
LDIDDR $289 #Salva posição da memória do display

JSR @aguardaKey1 #Aguarda a leitura de KEY1

STA @12 #Armazena o valor das dezenas de segundos

#unidades de segundo
STA @KEY1 #Limpa a leitura de KEY1
JSR @subrotina_limpa_leds #Limpa os LEDs

LDI $1 #Carrega o acumulador com  valor 1
STA @256 #Acende o LEDR0 para indicar que está configurando as unidades de segundos

LDI $9 #Carrega o acumulador com  valor 9
STA @50 #Salva o limite de dezenas de hora
LDIDDR $288 #Salva posição da memória do display

JSR @aguardaKey1 #Aguarda a leitura de KEY1

STA @11 #Armazena o valor das unidades de segundo

JSR @subrotina_limpa_leds #Limpa os LEDs
STA @KEY1 #Limpa a leitura de KEY1
RET #Retorna ao loop principal

aguardaKey1:
LDA @320 #Lê SW0-SW7
CLT @50 #Compara com o limite da casa
JL @desvio_aguardaKey1 #Se for menor do que 2, armazena o valor
LDA @50 #Se não for, carrega o acumulador com o limite da casa

desvio_aguardaKey1:
STADDR #Escreve o valor da casa em seu respectivo display

JSR @subrotina_compara_Key1 #Chama a subrotina de comparação de KEY1
JEQ @aguardaKey1 #Se não foi, continue aguardando
RET #Retorna

#################################################### END sub-rotina de configuração do limite de incremento

#################################################### BEGIN Sub-rotina de reiniciar de contagem
subrotina_reiniciar_contagem:
STA @FPGA_RESET #Limpa a leitura de FPGA_RESET
LDI $0 #Carrega o acumulador com  valor 0
STA @11 #Zera o valor das unidades
STA @12 #Zera o valor das dezenas
STA @13 #Zera o valor das centenas
STA @14 #Zera o valor das unidades de milhar
STA @15 #Zera o valor das dezenas de milhar
STA @16 #Zera o valor das centenas de milhar
STA @17 #Zera a flag de inibir contagem
STA @258 #Apaga o LED de overflow
STA @257 #Apaga o LED de limite atingido
RET #Retorna ao loop principal
#################################################### END da sub-rotina de reiniciar de contagem

#################################################### BEGIN subrotina limpa display
subrotina_limpa_display:
LDI $0 #Carrega o acumulador com  valor 0
STA @288 #Zera HEX0
STA @289 #Zera HEX1
STA @290 #Zera HEX2
STA @291 #Zera HEX3
STA @292 #Zera HEX4
STA @293 #Zera HEX5
RET #Retorna
#################################################### END subrotina limpa display

#################################################### BEGIN subrotina limpa leds
subrotina_limpa_leds:
LDI $0 #Carrega o acumulador com  valor 0
STA @256 #Zera dos LDR0-LDR7
STA @257 #Zera dos LDR8
STA @258 #Zera dos LDR9
RET #Retorna
#################################################### END subrotina limpa leds

#################################################### BEGIN subrotina compara Key1
subrotina_compara_Key1:
LDA R2, 353 #Lê KEY1
AND1 R2, 1 #Mask
CEQ R2, 0 #Verifica se KEY1 não foi pressionado
RET #Se Retorna
#################################################### END subrotina compara Key1