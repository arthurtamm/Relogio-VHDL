tmp(0) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(1) := JSR & "00" & '1' & x"10";	-- JSR @272	#Limpa o display
tmp(2) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(3) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(4) := STA & "00" & '0' & x"0B";	-- STA @11 	#Zera o valor das unidades
tmp(5) := LDI & "00" & '0' & x"05";	-- LDI $5 
tmp(6) := STA & "00" & '0' & x"0C";	-- STA @12 	#Zera o valor das dezenas
tmp(7) := LDI & "00" & '0' & x"09";	-- LDI $9
tmp(8) := STA & "00" & '0' & x"0D";	-- STA @13 	#Zera o valor das centenas
tmp(9) := LDI & "00" & '0' & x"05";	-- LDI $5
tmp(10) := STA & "00" & '0' & x"0E";	-- STA @14 	#Zera o valor das unidades de milhar
tmp(11) := LDI & "00" & '0' & x"03";	-- LDI $3
tmp(12) := STA & "00" & '0' & x"0F";	-- STA @15 	#Zera o valor das dezenas de milhar
tmp(13) := LDI & "00" & '0' & x"02";	-- LDI $2
tmp(14) := STA & "00" & '0' & x"10";	-- STA @16 	#Zera o valor das centenas de milhar
tmp(15) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(16) := STA & "00" & '0' & x"11";	-- STA @17 	#Zera a flag de inibir contagem
tmp(17) := STA & "00" & '1' & x"FF";	-- STA @KEY0 	#Limpa a leitura de KEY0
tmp(18) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(19) := STA & "00" & '1' & x"FD";	-- STA @KEY2 	#Limpa a leitura de KEY2
tmp(20) := STA & "00" & '1' & x"FC";	-- STA @FPGA_RESET 	#Limpa a leitura de FPGA_RESET
tmp(21) := STA & "00" & '0' & x"00";	-- STA @0 	#Criando a constante 0
tmp(22) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(23) := STA & "00" & '0' & x"01";	-- STA @1 	#Criando a constante 1
tmp(24) := LDI & "00" & '0' & x"02";	-- LDI $2 	#Carrega o acumulador com  valor 2
tmp(25) := STA & "00" & '0' & x"02";	-- STA @2 	#Criando a constante 2
tmp(26) := LDI & "00" & '0' & x"04";	-- LDI $4 	#Carrega o acumulador com  valor 4
tmp(27) := STA & "00" & '0' & x"04";	-- STA @4 	#Criando a constante 4
tmp(28) := LDI & "00" & '0' & x"05";	-- LDI $5 	#Carrega o acumulador com  valor 5
tmp(29) := STA & "00" & '0' & x"05";	-- STA @5 	#Criando a constante 5
tmp(30) := LDI & "00" & '0' & x"06";	-- LDI $6 	#Carrega o acumulador com  valor 6
tmp(31) := STA & "00" & '0' & x"06";	-- STA @6 	#Criando a constante 6
tmp(32) := LDI & "00" & '0' & x"09";	-- LDI $9 	#Carrega o acumulador com  valor 9
tmp(33) := STA & "00" & '0' & x"09";	-- STA @9 	#Criando a constante 9
tmp(34) := LDI & "00" & '0' & x"0A";	-- LDI $10 	#Carrega o acumulador com  valor 10
tmp(35) := STA & "00" & '0' & x"0A";	-- STA @10 	#Criando a constante 10
tmp(36) := LDI & "00" & '0' & x"0F";	-- LDI $15 	#Carrega o acumulador com  valor 15
tmp(37) := STA & "00" & '0' & x"73";	-- STA @115 	#Criando a constante 15
tmp(38) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(39) := STA & "00" & '0' & x"15";	-- STA @21 	#Maximo valor das unidades do limite
tmp(40) := STA & "00" & '0' & x"16";	-- STA @22 	#Maximo valor das dezenas do limite
tmp(41) := STA & "00" & '0' & x"17";	-- STA @23 	#Maximo valor das centenas do limite
tmp(42) := STA & "00" & '0' & x"18";	-- STA @24 	#Maximo valor das unidades de milhar do limite
tmp(43) := STA & "00" & '0' & x"19";	-- STA @25 	#Maximo valor das dezenas de milhar do limite
tmp(44) := LDI & "00" & '0' & x"0A";	-- LDI $10 	#Carrega o acumulador com  valor 10
tmp(45) := STA & "00" & '0' & x"1A";	-- STA @26 	#Maximo valor das centenas de milhar do limite
tmp(46) := LDA & "00" & '1' & x"60";	-- LDA @352 	#Lê KEY0
tmp(47) := AND1 & "00" & '0' & x"01";	-- AND1 @1 	#Mask
tmp(48) := CEQ & "00" & '0' & x"00";	-- CEQ @0 	#Verifica se KEY0 não foi pressionado
tmp(49) := JEQ & "00" & '0' & x"33";	-- JEQ @51	#Se não foi, pula a chamada da subrotina de incremento
tmp(50) := JSR & "00" & '0' & x"40";	-- JSR @64	#Chama a subrotina de incremento
tmp(51) := JSR & "00" & '0' & x"80";	-- JSR @128	#Atualiza o display
tmp(52) := LDA & "00" & '1' & x"61";	-- LDA @353 	#Lê KEY1
tmp(53) := AND1 & "00" & '0' & x"01";	-- AND1 @1 	#Mask
tmp(54) := CEQ & "00" & '0' & x"00";	-- CEQ @0 	#Verifica se KEY1 não foi pressionado
tmp(55) := JEQ & "00" & '0' & x"39";	-- JEQ @57	#Se não foi, pula a chamada da subrotina de configuracao do limite
tmp(56) := JSR & "00" & '0' & x"8D";	-- JSR @141	#Chama a subrotina de configuracao do limite
tmp(57) := JSR & "00" & '0' & x"E8";	-- JSR @232	#Verifica se o limite foi atingido
tmp(58) := LDA & "00" & '1' & x"64";	-- LDA @356 	#Lê FPGA_RESET
tmp(59) := AND1 & "00" & '0' & x"01";	-- AND1 @1 	#Mask
tmp(60) := CEQ & "00" & '0' & x"00";	-- CEQ @0 	#Verifica se FPGA_RESET não foi pressionado
tmp(61) := JEQ & "00" & '0' & x"3F";	-- JEQ @63	#Se não foi, pula a chamada da subrotina de reiniciar contagem
tmp(62) := JSR & "00" & '1' & x"04";	-- JSR @260	#Chama a subrotina de reiniciar contagem
tmp(63) := JMP & "00" & '0' & x"2E";	-- JMP @46	#Retorna ao inicio do loop
tmp(64) := STA & "00" & '1' & x"FF";	-- STA @KEY0 	#Limpa a leitura de KEY0
tmp(65) := LDA & "00" & '0' & x"11";	-- LDA @17 	#Lê a flag de inibir contagem
tmp(66) := CEQ & "00" & '0' & x"00";	-- CEQ @0 	#Verifica se a contagem não está inibida
tmp(67) := JEQ & "00" & '0' & x"45";	-- JEQ @69	#Se não estiver, continua a contagem
tmp(68) := RET & "00" & '0' & x"00";	-- RET 	#Se estiver inibida, retorna ao loop principal
tmp(69) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(70) := SOMA & "00" & '0' & x"0B";	-- SOMA @11 	#Soma o valor das unidades dos segundos com 1
tmp(71) := CEQ & "00" & '0' & x"0A";	-- CEQ @10 	#Verifica se o valor das unidades dos segundos é igual a 10
tmp(72) := JEQ & "00" & '0' & x"4B";	-- JEQ @75	#Se sim, incremente a dezena
tmp(73) := STA & "00" & '0' & x"0B";	-- STA @11 	#Armazena o valor das unidades dos segundos
tmp(74) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(75) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(76) := STA & "00" & '0' & x"0B";	-- STA @11 	#Zera o valor das unidades dos segundos
tmp(77) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(78) := SOMA & "00" & '0' & x"0C";	-- SOMA @12 	#Soma o valor das dezenas dos segundos com 1
tmp(79) := CEQ & "00" & '0' & x"06";	-- CEQ @6 	#Verifica se o valor das dezenas dos segundos é igual a 6
tmp(80) := JEQ & "00" & '0' & x"53";	-- JEQ @83	#Se sim, incremente a unidades dos minutos
tmp(81) := STA & "00" & '0' & x"0C";	-- STA @12 	#Armazena o valor das dezenas dos segundos
tmp(82) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(83) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(84) := STA & "00" & '0' & x"0C";	-- STA @12 	#Zera o valor das dezenas dos segundos
tmp(85) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(86) := SOMA & "00" & '0' & x"0D";	-- SOMA @13 	#Soma o valor das unidades dos minutos com 1
tmp(87) := CEQ & "00" & '0' & x"0A";	-- CEQ @10 	#Verifica se o valor das unidades dos minutos é igual a 10
tmp(88) := JEQ & "00" & '0' & x"5B";	-- JEQ @91	#Se sim, incremente as dezenas dos minutos
tmp(89) := STA & "00" & '0' & x"0D";	-- STA @13 	#Armazena o valor das unidades dos minutos
tmp(90) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(91) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(92) := STA & "00" & '0' & x"0D";	-- STA @13 	#Zera o valor das unidades dos minutos
tmp(93) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(94) := SOMA & "00" & '0' & x"0E";	-- SOMA @14 	#Soma o valor das dezenas dos minutos com 1
tmp(95) := CEQ & "00" & '0' & x"06";	-- CEQ @6 	#Verifica se o valor das dezenas dos minutos é igual a 6
tmp(96) := JEQ & "00" & '0' & x"63";	-- JEQ @99	#Se sim, incremente as unidades das horas
tmp(97) := STA & "00" & '0' & x"0E";	-- STA @14 	#Armazena o valor das unidades de milhar
tmp(98) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(99) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(100) := STA & "00" & '0' & x"0E";	-- STA @14 	#Zera o valor das dezenas dos minutos
tmp(101) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(102) := SOMA & "00" & '0' & x"0F";	-- SOMA @15 	#Soma o valor das unidades das horas com 1
tmp(103) := CEQ & "00" & '0' & x"0A";	-- CEQ @10 	#Verifica se o valor das unidades das horas é igual a 10
tmp(104) := JEQ & "00" & '0' & x"6D";	-- JEQ @109	#Se sim, incremente as unidades das horas
tmp(105) := CEQ & "00" & '0' & x"04";	-- CEQ @4 	#Verifica se o valor das unidades das horas é igual a 4
tmp(106) := JEQ & "00" & '0' & x"73";	-- JEQ @115	#Se sim, cheque se o valor das dezenas de horas é igual a 2
tmp(107) := STA & "00" & '0' & x"0F";	-- STA @15 	#Armazena o valor das unidades das horas
tmp(108) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(109) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(110) := STA & "00" & '0' & x"0F";	-- STA @15 	#Zera o valor das unidades das horas
tmp(111) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(112) := SOMA & "00" & '0' & x"10";	-- SOMA @16 	#Soma o valor das dezenas das horas com 1
tmp(113) := STA & "00" & '0' & x"10";	-- STA @16 	#Armazena o valor das dezenas das horas
tmp(114) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(115) := LDA & "01" & '0' & x"10";	-- LDA R1, 16 	#Carrega o registrador 1 com o valor das dezenas de horas
tmp(116) := CEQ & "01" & '0' & x"02";	-- CEQ R1, 2 	#Verifica se o valor das dezenas de horas é igual a 2
tmp(117) := JEQ & "00" & '0' & x"78";	-- JEQ @120	#Se sim, reinicie a contagem
tmp(118) := STA & "00" & '0' & x"0F";	-- STA R0, 15 	#Armazena o valor das unidades de horas
tmp(119) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(120) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(121) := STA & "00" & '0' & x"0B";	-- STA @11 	#Armazena o valor das unidades
tmp(122) := STA & "00" & '0' & x"0C";	-- STA @12 	#Armazena o valor das dezenas
tmp(123) := STA & "00" & '0' & x"0D";	-- STA @13 	#Armazena o valor das centenas
tmp(124) := STA & "00" & '0' & x"0E";	-- STA @14 	#Armazena o valor das unidades de milhar
tmp(125) := STA & "00" & '0' & x"0F";	-- STA @15 	#Armazena o valor das dezenas de milhar
tmp(126) := STA & "00" & '0' & x"10";	-- STA @16 	#Armazena o valor das centenas de milhar
tmp(127) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(128) := LDA & "00" & '0' & x"0B";	-- LDA @11 	#Lê o valor das unidades
tmp(129) := STA & "00" & '1' & x"20";	-- STA @288 	#Escreve o valor das unidades em HEX0
tmp(130) := LDA & "00" & '0' & x"0C";	-- LDA @12 	#Lê o valor das dezenas
tmp(131) := STA & "00" & '1' & x"21";	-- STA @289 	#Escreve o valor das dezenas em HEX1
tmp(132) := LDA & "00" & '0' & x"0D";	-- LDA @13 	#Lê o valor das centenas
tmp(133) := STA & "00" & '1' & x"22";	-- STA @290 	#Escreve o valor das centenas em HEX2
tmp(134) := LDA & "00" & '0' & x"0E";	-- LDA @14 	#Lê o valor das unidades de milhar
tmp(135) := STA & "00" & '1' & x"23";	-- STA @291 	#Escreve o valor das unidades de milhar em HEX3
tmp(136) := LDA & "00" & '0' & x"0F";	-- LDA @15 	#Lê o valor das dezenas de milhar
tmp(137) := STA & "00" & '1' & x"24";	-- STA @292 	#Escreve o valor das dezenas de milhar em HEX4
tmp(138) := LDA & "00" & '0' & x"10";	-- LDA @16 	#Lê o valor das centenas de milhar
tmp(139) := STA & "00" & '1' & x"25";	-- STA @293 	#Escreve o valor das centenas de milhar em HEX5
tmp(140) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(141) := JSR & "00" & '1' & x"10";	-- JSR @272	#Limpa o display
tmp(142) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(143) := STA & "00" & '0' & x"0B";	-- STA @11 	#Zera o valor das unidades de segundos
tmp(144) := STA & "00" & '0' & x"0C";	-- STA @12 	#Zera o valor das dezenas de segundos
tmp(145) := STA & "00" & '0' & x"0D";	-- STA @13 	#Zera o valor das unidades de minutos
tmp(146) := STA & "00" & '0' & x"0E";	-- STA @14 	#Zera o valor das dezenas de minutos
tmp(147) := STA & "00" & '0' & x"0F";	-- STA @15 	#Zera o valor das unidades de horas
tmp(148) := STA & "00" & '0' & x"10";	-- STA @16 	#Zera o valor das dezenas de horas
tmp(149) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(150) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(151) := LDI & "00" & '0' & x"20";	-- LDI $32 	#Carrega o acumulador com  valor 32
tmp(152) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR5 para indicar que está configurando as dezenas de hora
tmp(153) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(154) := AND1 & "00" & '0' & x"73";	-- AND1 @115 	#Mask
tmp(155) := CEQ & "00" & '0' & x"02";	-- CEQ @2 	#Compara com o valor 2
tmp(156) := JL & "00" & '0' & x"9E";	-- JL @158	#Se for menor do que 2, armazena o valor
tmp(157) := LDI & "00" & '0' & x"02";	-- LDI $2 	#Se não for, carrega o acumulador com  valor 2
tmp(158) := STA & "00" & '1' & x"25";	-- STA @293 	#Escreve o valor das unidades em HEX5
tmp(159) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(160) := JEQ & "00" & '0' & x"99";	-- JEQ @153	#Se não foi, continue aguardando
tmp(161) := STA & "00" & '0' & x"10";	-- STA @16 	#Armazena o valor das dezenas de horas
tmp(162) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(163) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(164) := LDI & "00" & '0' & x"10";	-- LDI $16 	#Carrega o acumulador com  valor 16
tmp(165) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR4 para indicar que está configurando as dezenas do limite
tmp(166) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(167) := CEQ & "00" & '0' & x"04";	-- CEQ @4 	#Compara com o valor 4
tmp(168) := JL & "00" & '0' & x"B1";	-- JL @177	#Se for menor do que 4, armazena o valor
tmp(169) := LDA & "01" & '0' & x"10";	-- LDA R1, 16 	#Se não for, checa se o valor das dezenas de horas é igual a 2
tmp(170) := CEQ & "01" & '0' & x"02";	-- CEQ R1, 2 	#Compara com o valor 2
tmp(171) := JL & "00" & '0' & x"AE";	-- JL @174	#Se dezenas de hora for menor do que 2, checa se unidades de hora é menor do que 9
tmp(172) := LDI & "00" & '0' & x"03";	-- LDI $3 	#Se não for, carrega o acumulador com  valor 3
tmp(173) := JMP & "00" & '0' & x"B1";	-- JMP @177	#Se dezenas de hora for igual a 2, armazena o valor 3
tmp(174) := CEQ & "00" & '0' & x"09";	-- CEQ @9 	#Compara com o valor 9
tmp(175) := JL & "00" & '0' & x"B1";	-- JL @177	#Se for menor do que 9, armazena o valor
tmp(176) := LDI & "00" & '0' & x"09";	-- LDI $9 	#Se não for, carrega o acumulador com  valor 9
tmp(177) := STA & "00" & '1' & x"24";	-- STA @292 	#Escreve o valor das unidades em HEX4
tmp(178) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(179) := JEQ & "00" & '0' & x"A6";	-- JEQ @166	#Se não foi, continue aguardando
tmp(180) := STA & "00" & '0' & x"0F";	-- STA @15 	#Armazena o valor das unidades de hora
tmp(181) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(182) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(183) := LDI & "00" & '0' & x"08";	-- LDI $8 	#Carrega o acumulador com  valor 8
tmp(184) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR3 para indicar que está configurando as dezenas de minuto
tmp(185) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(186) := CEQ & "00" & '0' & x"05";	-- CEQ @5 	#Compara com o valor 5
tmp(187) := JL & "00" & '0' & x"BD";	-- JL @189	#Se for menor do que 5, armazena o valor
tmp(188) := LDI & "00" & '0' & x"05";	-- LDI $5 	#Se não for, carrega o acumulador com  valor 5
tmp(189) := STA & "00" & '1' & x"23";	-- STA @291 	#Escreve o valor das dezenas de minuto em HEX3
tmp(190) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(191) := JEQ & "00" & '0' & x"B9";	-- JEQ @185	#Se não foi, continue aguardando
tmp(192) := STA & "00" & '0' & x"0E";	-- STA @14 	#Armazena o valor das dezenas de minuto
tmp(193) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(194) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(195) := LDI & "00" & '0' & x"04";	-- LDI $4 	#Carrega o acumulador com  valor 4
tmp(196) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR2 para indicar que está configurando as unidades de minuto
tmp(197) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(198) := CEQ & "00" & '0' & x"09";	-- CEQ @9 	#Compara com o valor 9
tmp(199) := JL & "00" & '0' & x"C9";	-- JL @201	#Se for menor do que 9, armazena o valor
tmp(200) := LDI & "00" & '0' & x"09";	-- LDI $9 	#Se não for, carrega o acumulador com  valor 9
tmp(201) := STA & "00" & '1' & x"22";	-- STA @290 	#Escreve o valor das unidades de minuto em HEX2
tmp(202) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(203) := JEQ & "00" & '0' & x"C5";	-- JEQ @197	#Se não foi, continue aguardando
tmp(204) := STA & "00" & '0' & x"0D";	-- STA @13 	#Armazena o valor das unidades de minuto
tmp(205) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(206) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(207) := LDI & "00" & '0' & x"02";	-- LDI $2 	#Carrega o acumulador com  valor 2
tmp(208) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR1 para indicar que está configurando as dezenas de segundos
tmp(209) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(210) := CEQ & "00" & '0' & x"05";	-- CEQ @5 	#Compara com o valor 5
tmp(211) := JL & "00" & '0' & x"D5";	-- JL @213	#Se for menor do que 5, armazena o valor
tmp(212) := LDI & "00" & '0' & x"05";	-- LDI $5 	#Se não for, carrega o acumulador com  valor 5
tmp(213) := STA & "00" & '1' & x"21";	-- STA @289 	#Escreve o valor das dezenas de segundos em HEX1
tmp(214) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(215) := JEQ & "00" & '0' & x"D1";	-- JEQ @209	#Se não foi, continue aguardando
tmp(216) := STA & "00" & '0' & x"0C";	-- STA @12 	#Armazena o valor das dezenas de segundos
tmp(217) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(218) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(219) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(220) := STA & "00" & '1' & x"00";	-- STA @256 	#Acende o LEDR0 para indicar que está configurando as unidades de segundos
tmp(221) := LDA & "00" & '1' & x"40";	-- LDA @320 	#Lê SW0-SW7
tmp(222) := CEQ & "00" & '0' & x"09";	-- CEQ @9 	#Compara com o valor 9
tmp(223) := JL & "00" & '0' & x"E1";	-- JL @225	#Se for menor do que 9, armazena o valor
tmp(224) := LDA & "00" & '0' & x"09";	-- LDA @9 	#Se não for, carrega o acumulador com  valor 9
tmp(225) := STA & "00" & '1' & x"20";	-- STA @288 	#Escreve o valor das unidades de segundos em HEX0
tmp(226) := JSR & "00" & '1' & x"1D";	-- JSR @285	#Chama a subrotina de comparação de KEY1
tmp(227) := JEQ & "00" & '0' & x"DD";	-- JEQ @221	#Se não foi, continue aguardando
tmp(228) := STA & "00" & '0' & x"0B";	-- STA @11 	#Armazena o valor das unidades de segundo
tmp(229) := JSR & "00" & '1' & x"18";	-- JSR @280	#Limpa os LEDs
tmp(230) := STA & "00" & '1' & x"FE";	-- STA @KEY1 	#Limpa a leitura de KEY1
tmp(231) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(232) := LDA & "00" & '0' & x"0B";	-- LDA @11 	#Lê o valor das unidades
tmp(233) := CEQ & "00" & '0' & x"15";	-- CEQ @21 	#Compara com o valor das unidades do limite
tmp(234) := JEQ & "00" & '0' & x"EC";	-- JEQ @236	#Se for igual, verifica as dezenas
tmp(235) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(236) := LDA & "00" & '0' & x"0C";	-- LDA @12 	#Lê o valor das dezenas
tmp(237) := CEQ & "00" & '0' & x"16";	-- CEQ @22 	#Compara com o valor das dezenas do limite
tmp(238) := JEQ & "00" & '0' & x"F0";	-- JEQ @240	#Se for igual, verifica as centenas
tmp(239) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(240) := LDA & "00" & '0' & x"0D";	-- LDA @13 	#Lê o valor das centenas
tmp(241) := CEQ & "00" & '0' & x"17";	-- CEQ @23 	#Compara com o valor das centenas do limite
tmp(242) := JEQ & "00" & '0' & x"F4";	-- JEQ @244	#Se for igual, verifica as unidades de milhar
tmp(243) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(244) := LDA & "00" & '0' & x"0E";	-- LDA @14 	#Lê o valor das unidades de milhar
tmp(245) := CEQ & "00" & '0' & x"18";	-- CEQ @24 	#Compara com o valor das unidades de milhar do limite
tmp(246) := JEQ & "00" & '0' & x"F8";	-- JEQ @248	#Se for igual, verifica as dezenas de milhar
tmp(247) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(248) := LDA & "00" & '0' & x"0F";	-- LDA @15 	#Lê o valor das dezenas de milhar
tmp(249) := CEQ & "00" & '0' & x"19";	-- CEQ @25 	#Compara com o valor das dezenas de milhar do limite
tmp(250) := JEQ & "00" & '0' & x"FC";	-- JEQ @252	#Se for igual, verifica as centenas de milhar
tmp(251) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(252) := LDA & "00" & '0' & x"10";	-- LDA @16 	#Lê o valor das centenas de milhar
tmp(253) := CEQ & "00" & '0' & x"1A";	-- CEQ @26 	#Compara com o valor das centenas de milhar do limite
tmp(254) := JEQ & "00" & '1' & x"00";	-- JEQ @256	#Se for igual, ative a flag de inibir contagem e ascenda o LED de limite atingido
tmp(255) := RET & "00" & '0' & x"00";	-- RET 	#Se for diferente, retorna ao loop principal
tmp(256) := LDI & "00" & '0' & x"01";	-- LDI $1 	#Carrega o acumulador com  valor 1
tmp(257) := STA & "00" & '0' & x"11";	-- STA @17 	#Ativa a flag de inibir contagem
tmp(258) := STA & "00" & '1' & x"01";	-- STA @257 	#Acende o LED de limite atingido
tmp(259) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(260) := STA & "00" & '1' & x"FC";	-- STA @FPGA_RESET 	#Limpa a leitura de FPGA_RESET
tmp(261) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(262) := STA & "00" & '0' & x"0B";	-- STA @11 	#Zera o valor das unidades
tmp(263) := STA & "00" & '0' & x"0C";	-- STA @12 	#Zera o valor das dezenas
tmp(264) := STA & "00" & '0' & x"0D";	-- STA @13 	#Zera o valor das centenas
tmp(265) := STA & "00" & '0' & x"0E";	-- STA @14 	#Zera o valor das unidades de milhar
tmp(266) := STA & "00" & '0' & x"0F";	-- STA @15 	#Zera o valor das dezenas de milhar
tmp(267) := STA & "00" & '0' & x"10";	-- STA @16 	#Zera o valor das centenas de milhar
tmp(268) := STA & "00" & '0' & x"11";	-- STA @17 	#Zera a flag de inibir contagem
tmp(269) := STA & "00" & '1' & x"02";	-- STA @258 	#Apaga o LED de overflow
tmp(270) := STA & "00" & '1' & x"01";	-- STA @257 	#Apaga o LED de limite atingido
tmp(271) := RET & "00" & '0' & x"00";	-- RET 	#Retorna ao loop principal
tmp(272) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(273) := STA & "00" & '1' & x"20";	-- STA @288 	#Zera HEX0
tmp(274) := STA & "00" & '1' & x"21";	-- STA @289 	#Zera HEX1
tmp(275) := STA & "00" & '1' & x"22";	-- STA @290 	#Zera HEX2
tmp(276) := STA & "00" & '1' & x"23";	-- STA @291 	#Zera HEX3
tmp(277) := STA & "00" & '1' & x"24";	-- STA @292 	#Zera HEX4
tmp(278) := STA & "00" & '1' & x"25";	-- STA @293 	#Zera HEX5
tmp(279) := RET & "00" & '0' & x"00";	-- RET 	#Retorna
tmp(280) := LDI & "00" & '0' & x"00";	-- LDI $0 	#Carrega o acumulador com  valor 0
tmp(281) := STA & "00" & '1' & x"00";	-- STA @256 	#Zera dos LDR0-LDR7
tmp(282) := STA & "00" & '1' & x"01";	-- STA @257 	#Zera dos LDR8
tmp(283) := STA & "00" & '1' & x"02";	-- STA @258 	#Zera dos LDR9
tmp(284) := RET & "00" & '0' & x"00";	-- RET 	#Retorna
tmp(285) := LDA & "10" & '1' & x"61";	-- LDA R2, 353 	#Lê KEY1
tmp(286) := AND1 & "10" & '0' & x"01";	-- AND1 R2, 1 	#Mask
tmp(287) := CEQ & "10" & '0' & x"00";	-- CEQ R2, 0 	#Verifica se KEY1 não foi pressionado
tmp(288) := RET & "00" & '0' & x"00";	-- RET 	#Se Retorna
